name: FBX to VRM Converter & Committer

on:
  workflow_dispatch:  # 手動実行トリガー

jobs:
  convert-and-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install FBX2glTF from Godot fork
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip libstdc++6
          wget https://github.com/godotengine/FBX2glTF/releases/latest/download/FBX2glTF-linux-x86_64.zip -O fbx2gltf.zip
          unzip fbx2gltf.zip -d fbx2gltf
          sudo mv fbx2gltf/FBX2glTF-linux-x86_64/FBX2glTF-linux-x86_64 /usr/local/bin/fbx2gltf
          sudo chmod +x /usr/local/bin/fbx2gltf

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: |
          npm init -y
          npm install @gltf-transform/core @gltf-transform/extensions @gltf-transform/functions @pixiv/three-vrm

      - name: Write convert.js
        run: |
          cat << 'EOF' > convert.js
          #!/usr/bin/env node
          import { spawnSync }    from 'child_process';
          import { NodeIO }       from '@gltf-transform/core';
          import { VRMExtension } from '@gltf-transform/extensions';
          import { VRM }          from '@pixiv/three-vrm';
          import fs               from 'fs';
          import path             from 'path';

          const [,, inputFbx, outputVrm] = process.argv;
          if (!inputFbx || !outputVrm) {
            console.error('Usage: node convert.js input.fbx output.vrm');
            process.exit(1);
          }

          const tmpGlb = path.join(process.cwd(), 'tmp.glb');
          const fbxResult = spawnSync('fbx2gltf', ['-i', inputFbx, '-o', tmpGlb, '-b'], { stdio: 'inherit' });

          if (fbxResult.status !== 0) {
            console.error('FBX2glTF failed');
            process.exit(1);
          }

          const io  = new NodeIO().registerExtensions([VRMExtension]);
          const doc = io.read(tmpGlb);
          const root = doc.getRoot();

          const vrm = await VRM.from(root, {
            meta: {
              name:             path.basename(inputFbx, '.fbx'),
              version:          '1.0.0',
              author:           'GitHub Actions',
              contactInformation: '',
              reference:        [],
              allowedUser:      'Everyone',
              violentUssage:    'Disallow',
              sexualUssage:     'Disallow',
              commercialUssage: 'Allow',
              otherPermissionUrl: '',
              licenseName: 'CC0',
              otherLicenseUrl: ''
            }
          });

          await io.write(outputVrm, doc);
          fs.unlinkSync(tmpGlb);
          console.log(`✅ Converted ${inputFbx} → ${outputVrm}`);
          EOF
          chmod +x convert.js

      - name: Convert all FBX to VRM
        run: |
          mkdir -p outputs
          shopt -s nullglob
          for f in *.fbx; do
            name=$(basename "$f" .fbx)
            node convert.js "$f" "outputs/${name}.vrm"
          done

      - name: Commit and Push VRM files
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add outputs/*.vrm || true
          git commit -m "chore: Add converted VRM models" || echo "No changes to commit"
          git push
